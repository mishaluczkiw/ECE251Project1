C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\varou\S
                    -implicityStudio\v4_workspace1\UART-alpha\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOAT
                    -FUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\varou\SimplicityStudio\v4_worksp
                    -ace1\UART-alpha\inc\graphics;C:\Users\varou\SimplicityStudio\v4_workspace1\UART-alpha\inc;C:\Users\varou\SimplicityStudi
                    -o\v4_workspace1\UART-alpha\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/
                    -SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStud
                    -io/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks
                    -/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kit
                    -s/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common
                    -/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051b
                    -ase;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\InitDevice.lst) COND 
                    -PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_2_enter_DefaultMode_from_RESET();
  30   1              PORTS_3_enter_DefaultMode_from_RESET();
  31   1              PBCFG_0_enter_DefaultMode_from_RESET();
  32   1              CLOCK_0_enter_DefaultMode_from_RESET();
  33   1              TIMER01_0_enter_DefaultMode_from_RESET();
  34   1              TIMER16_2_enter_DefaultMode_from_RESET();
  35   1              TIMER16_3_enter_DefaultMode_from_RESET();
  36   1              TIMER16_4_enter_DefaultMode_from_RESET();
  37   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  38   1              SPI_0_enter_DefaultMode_from_RESET();
  39   1              UART_0_enter_DefaultMode_from_RESET();
  40   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  41   1              // Restore the SFRPAGE
  42   1              SFRPAGE = SFRPAGE_save;
  43   1              // [Config Calls]$
  44   1      
  45   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 2   

  46          
  47          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  48   1              // $[WDTCN - Watchdog Timer Control]
  49   1              SFRPAGE = 0x00;
  50   1              //Disable Watchdog with key sequence
  51   1              WDTCN = 0xDE; //First key
  52   1              WDTCN = 0xAD; //Second key
  53   1              // [WDTCN - Watchdog Timer Control]$
  54   1      
  55   1      }
  56          
  57          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
  58   1              // $[HFOSC1 Setup]
  59   1              // [HFOSC1 Setup]$
  60   1      
  61   1              // $[CLKSEL - Clock Select]
  62   1              /***********************************************************************
  63   1               - Clock derived from the Internal High Frequency Oscillator 0
  64   1               - SYSCLK is equal to selected clock source divided by 1
  65   1               ***********************************************************************/
  66   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
  67   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
  68   1                      ;
  69   1              // [CLKSEL - Clock Select]$
  70   1      
  71   1      }
  72          
  73          extern void SPI_0_enter_DefaultMode_from_RESET(void) {
  74   1              // $[SPI0CKR - SPI0 Clock Rate]
  75   1              /***********************************************************************
  76   1               - SPI0 Clock Rate = 0x0B
  77   1               ***********************************************************************/
  78   1              SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
  79   1              // [SPI0CKR - SPI0 Clock Rate]$
  80   1      
  81   1              // $[SPI0CFG - SPI0 Configuration]
  82   1              /***********************************************************************
  83   1               - Enable master mode. Operate as a master
  84   1               ***********************************************************************/
  85   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
  86   1              // [SPI0CFG - SPI0 Configuration]$
  87   1      
  88   1              // $[SPI0PCF - SPI0 Pin Configuration]
  89   1              // [SPI0PCF - SPI0 Pin Configuration]$
  90   1      
  91   1              // $[SPI0CN0 - SPI0 Control]
  92   1              /***********************************************************************
  93   1               - Enable the SPI module
  94   1               - 3-Wire Slave or 3-Wire Master Mode
  95   1               ***********************************************************************/
  96   1              SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
  97   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
  98   1              // [SPI0CN0 - SPI0 Control]$
  99   1      
 100   1              // $[SPI0FCN0 - SPI0 FIFO Control 0]
 101   1              // [SPI0FCN0 - SPI0 FIFO Control 0]$
 102   1      
 103   1              // $[SPI0FCN1 - SPI0 FIFO Control 1]
 104   1              // [SPI0FCN1 - SPI0 FIFO Control 1]$
 105   1      
 106   1      }
 107          
 108          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 3   

 109   1              // $[EIE1 - Extended Interrupt Enable 1]
 110   1              /***********************************************************************
 111   1               - Disable ADC0 Conversion Complete interrupt
 112   1               - Disable ADC0 Window Comparison interrupt
 113   1               - Disable CP0 interrupts
 114   1               - Disable CP1 interrupts
 115   1               - Enable interrupt requests generated by a Port Match
 116   1               - Disable all PCA0 interrupts
 117   1               - Disable all SMB0 interrupts
 118   1               - Enable interrupt requests generated by the TF3L or TF3H flags
 119   1               ***********************************************************************/
 120   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 121   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__ENABLED | EIE1_EPCA0__DISABLED
 122   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 123   1              // [EIE1 - Extended Interrupt Enable 1]$
 124   1      
 125   1              // $[EIE2 - Extended Interrupt Enable 2]
 126   1              /***********************************************************************
 127   1               - Disable CL0 interrupts
 128   1               - Disable all I2C0 slave interrupts
 129   1               - Enable interrupt requests generated by the TF4L or TF4H flags
 130   1               - Disable Timer 5 interrupts
 131   1               - Disable UART1 interrupts
 132   1               ***********************************************************************/
 133   1              EIE2 = EIE2_CL0__DISABLED | EIE2_EI2C0__DISABLED | EIE2_ET4__ENABLED
 134   1                              | EIE2_ET5__DISABLED | EIE2_ES1__DISABLED;
 135   1              // [EIE2 - Extended Interrupt Enable 2]$
 136   1      
 137   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 138   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 139   1      
 140   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 141   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 142   1      
 143   1              // $[EIP2 - Extended Interrupt Priority 2]
 144   1              // [EIP2 - Extended Interrupt Priority 2]$
 145   1      
 146   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 147   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 148   1      
 149   1              // $[IE - Interrupt Enable]
 150   1              /***********************************************************************
 151   1               - Enable each interrupt according to its individual mask setting
 152   1               - Disable external interrupt 0
 153   1               - Disable external interrupt 1
 154   1               - Enable interrupt requests generated by SPI0
 155   1               - Disable all Timer 0 interrupt
 156   1               - Disable all Timer 1 interrupt
 157   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 158   1               - Enable UART0 interrupt
 159   1               ***********************************************************************/
 160   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 161   1                              | IE_ESPI0__ENABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 162   1                              | IE_ET2__ENABLED | IE_ES0__ENABLED;
 163   1              // [IE - Interrupt Enable]$
 164   1      
 165   1              // $[IP - Interrupt Priority]
 166   1              // [IP - Interrupt Priority]$
 167   1      
 168   1              // $[IPH - Interrupt Priority High]
 169   1              // [IPH - Interrupt Priority High]$
 170   1      
 171   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 4   

 172          
 173          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 174   1              // $[XBR2 - Port I/O Crossbar 2]
 175   1              /***********************************************************************
 176   1               - Weak Pullups enabled 
 177   1               - Crossbar enabled
 178   1               - UART1 I/O unavailable at Port pin
 179   1               - UART1 RTS1 unavailable at Port pin
 180   1               - UART1 CTS1 unavailable at Port pin
 181   1               ***********************************************************************/
 182   1              SFRPAGE = 0x00;
 183   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 184   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 185   1                              | XBR2_URT1CTSE__DISABLED;
 186   1              // [XBR2 - Port I/O Crossbar 2]$
 187   1      
 188   1              // $[PRTDRV - Port Drive Strength]
 189   1              // [PRTDRV - Port Drive Strength]$
 190   1      
 191   1              // $[XBR0 - Port I/O Crossbar 0]
 192   1              /***********************************************************************
 193   1               - UART0 TX0, RX0 routed to Port pins P0.4 and P0.5
 194   1               - SPI I/O routed to Port pins
 195   1               - SMBus 0 I/O unavailable at Port pins
 196   1               - CP0 unavailable at Port pin
 197   1               - Asynchronous CP0 unavailable at Port pin
 198   1               - CP1 unavailable at Port pin
 199   1               - Asynchronous CP1 unavailable at Port pin
 200   1               - SYSCLK unavailable at Port pin
 201   1               ***********************************************************************/
 202   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__ENABLED | XBR0_SMB0E__DISABLED
 203   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 204   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 205   1              // [XBR0 - Port I/O Crossbar 0]$
 206   1      
 207   1              // $[XBR1 - Port I/O Crossbar 1]
 208   1              // [XBR1 - Port I/O Crossbar 1]$
 209   1      
 210   1      }
 211          
 212          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 213   1              // $[Timer Initialization]
 214   1              // Save Timer Configuration
 215   1              uint8_t TMR3CN0_TR3_save;
 216   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 217   1              // Stop Timer
 218   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 219   1              // [Timer Initialization]$
 220   1      
 221   1              // $[TMR3CN1 - Timer 3 Control 1]
 222   1              // [TMR3CN1 - Timer 3 Control 1]$
 223   1      
 224   1              // $[TMR3CN0 - Timer 3 Control]
 225   1              // [TMR3CN0 - Timer 3 Control]$
 226   1      
 227   1              // $[TMR3H - Timer 3 High Byte]
 228   1              /***********************************************************************
 229   1               - Timer 3 High Byte = 0xF8
 230   1               ***********************************************************************/
 231   1              TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 232   1              // [TMR3H - Timer 3 High Byte]$
 233   1      
 234   1              // $[TMR3L - Timer 3 Low Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 5   

 235   1              /***********************************************************************
 236   1               - Timer 3 Low Byte = 0x06
 237   1               ***********************************************************************/
 238   1              TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 239   1              // [TMR3L - Timer 3 Low Byte]$
 240   1      
 241   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 242   1              /***********************************************************************
 243   1               - Timer 3 Reload High Byte = 0xF8
 244   1               ***********************************************************************/
 245   1              TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 246   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 247   1      
 248   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 249   1              /***********************************************************************
 250   1               - Timer 3 Reload Low Byte = 0x06
 251   1               ***********************************************************************/
 252   1              TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 253   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 254   1      
 255   1              // $[TMR3CN0]
 256   1              /***********************************************************************
 257   1               - Start Timer 3 running
 258   1               ***********************************************************************/
 259   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 260   1              // [TMR3CN0]$
 261   1      
 262   1              // $[Timer Restoration]
 263   1              // Restore Timer Configuration
 264   1              TMR3CN0 |= TMR3CN0_TR3_save;
 265   1              // [Timer Restoration]$
 266   1      
 267   1      }
 268          
 269          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 270   1              // $[P0 - Port 0 Pin Latch]
 271   1              // [P0 - Port 0 Pin Latch]$
 272   1      
 273   1              // $[P0MDOUT - Port 0 Output Mode]
 274   1              /***********************************************************************
 275   1               - P0.0 output is open-drain
 276   1               - P0.1 output is open-drain
 277   1               - P0.2 output is open-drain
 278   1               - P0.3 output is open-drain
 279   1               - P0.4 output is push-pull
 280   1               - P0.5 output is open-drain
 281   1               - P0.6 output is push-pull
 282   1               - P0.7 output is open-drain
 283   1               ***********************************************************************/
 284   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 285   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 286   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
 287   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
 288   1              // [P0MDOUT - Port 0 Output Mode]$
 289   1      
 290   1              // $[P0MDIN - Port 0 Input Mode]
 291   1              // [P0MDIN - Port 0 Input Mode]$
 292   1      
 293   1              // $[P0SKIP - Port 0 Skip]
 294   1              /***********************************************************************
 295   1               - P0.0 pin is skipped by the crossbar
 296   1               - P0.1 pin is skipped by the crossbar
 297   1               - P0.2 pin is skipped by the crossbar
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 6   

 298   1               - P0.3 pin is skipped by the crossbar
 299   1               - P0.4 pin is not skipped by the crossbar
 300   1               - P0.5 pin is not skipped by the crossbar
 301   1               - P0.6 pin is not skipped by the crossbar
 302   1               - P0.7 pin is not skipped by the crossbar
 303   1               ***********************************************************************/
 304   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 305   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED
 306   1                              | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__NOT_SKIPPED
 307   1                              | P0SKIP_B7__NOT_SKIPPED;
 308   1              // [P0SKIP - Port 0 Skip]$
 309   1      
 310   1              // $[P0MASK - Port 0 Mask]
 311   1              /***********************************************************************
 312   1               - P0.0 pin logic value is ignored and will not cause a port mismatch
 313   1               event
 314   1               - P0.1 pin logic value is ignored and will not cause a port mismatch
 315   1               event
 316   1               - P0.2 pin logic value is compared to P0MAT.2
 317   1               - P0.3 pin logic value is ignored and will not cause a port mismatch
 318   1               event
 319   1               - P0.4 pin logic value is ignored and will not cause a port mismatch
 320   1               event
 321   1               - P0.5 pin logic value is ignored and will not cause a port mismatch
 322   1               event
 323   1               - P0.6 pin logic value is ignored and will not cause a port mismatch
 324   1               event
 325   1               - P0.7 pin logic value is ignored and will not cause a port mismatch
 326   1               event
 327   1               ***********************************************************************/
 328   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__COMPARED
 329   1                              | P0MASK_B3__IGNORED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 330   1                              | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
 331   1              // [P0MASK - Port 0 Mask]$
 332   1      
 333   1              // $[P0MAT - Port 0 Match]
 334   1              // [P0MAT - Port 0 Match]$
 335   1      
 336   1      }
 337          
 338          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 339   1              // $[P1 - Port 1 Pin Latch]
 340   1              // [P1 - Port 1 Pin Latch]$
 341   1      
 342   1              // $[P1MDOUT - Port 1 Output Mode]
 343   1              /***********************************************************************
 344   1               - P1.0 output is push-pull
 345   1               - P1.1 output is push-pull
 346   1               - P1.2 output is open-drain
 347   1               - P1.3 output is open-drain
 348   1               - P1.4 output is open-drain
 349   1               - P1.5 output is open-drain
 350   1               - P1.6 output is open-drain
 351   1               - P1.7 output is open-drain
 352   1               ***********************************************************************/
 353   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
 354   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 355   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 356   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 357   1              // [P1MDOUT - Port 1 Output Mode]$
 358   1      
 359   1              // $[P1MDIN - Port 1 Input Mode]
 360   1              // [P1MDIN - Port 1 Input Mode]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 7   

 361   1      
 362   1              // $[P1SKIP - Port 1 Skip]
 363   1              /***********************************************************************
 364   1               - P1.0 pin is not skipped by the crossbar
 365   1               - P1.1 pin is skipped by the crossbar
 366   1               - P1.2 pin is skipped by the crossbar
 367   1               - P1.3 pin is skipped by the crossbar
 368   1               - P1.4 pin is skipped by the crossbar
 369   1               - P1.5 pin is skipped by the crossbar
 370   1               - P1.6 pin is skipped by the crossbar
 371   1               - P1.7 pin is skipped by the crossbar
 372   1               ***********************************************************************/
 373   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 374   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED
 375   1                              | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 376   1              // [P1SKIP - Port 1 Skip]$
 377   1      
 378   1              // $[P1MASK - Port 1 Mask]
 379   1              // [P1MASK - Port 1 Mask]$
 380   1      
 381   1              // $[P1MAT - Port 1 Match]
 382   1              // [P1MAT - Port 1 Match]$
 383   1      
 384   1      }
 385          
 386          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 387   1              // $[P2 - Port 2 Pin Latch]
 388   1              // [P2 - Port 2 Pin Latch]$
 389   1      
 390   1              // $[P2MDOUT - Port 2 Output Mode]
 391   1              /***********************************************************************
 392   1               - P2.0 output is open-drain
 393   1               - P2.1 output is open-drain
 394   1               - P2.2 output is open-drain
 395   1               - P2.3 output is open-drain
 396   1               - P2.4 output is open-drain
 397   1               - P2.5 output is open-drain
 398   1               - P2.6 output is push-pull
 399   1               ***********************************************************************/
 400   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 401   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__OPEN_DRAIN
 402   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 403   1                              | P2MDOUT_B6__PUSH_PULL;
 404   1              // [P2MDOUT - Port 2 Output Mode]$
 405   1      
 406   1              // $[P2MDIN - Port 2 Input Mode]
 407   1              // [P2MDIN - Port 2 Input Mode]$
 408   1      
 409   1              // $[P2SKIP - Port 2 Skip]
 410   1              // [P2SKIP - Port 2 Skip]$
 411   1      
 412   1              // $[P2MASK - Port 2 Mask]
 413   1              // [P2MASK - Port 2 Mask]$
 414   1      
 415   1              // $[P2MAT - Port 2 Match]
 416   1              // [P2MAT - Port 2 Match]$
 417   1      
 418   1      }
 419          
 420          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 421   1              // $[P3 - Port 3 Pin Latch]
 422   1              // [P3 - Port 3 Pin Latch]$
 423   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 8   

 424   1              // $[P3MDOUT - Port 3 Output Mode]
 425   1              /***********************************************************************
 426   1               - P3.0 output is open-drain
 427   1               - P3.1 output is open-drain
 428   1               - P3.2 output is open-drain
 429   1               - P3.3 output is open-drain
 430   1               - P3.4 output is push-pull
 431   1               - P3.7 output is open-drain
 432   1               ***********************************************************************/
 433   1              SFRPAGE = 0x20;
 434   1              P3MDOUT = P3MDOUT_B0__OPEN_DRAIN | P3MDOUT_B1__OPEN_DRAIN
 435   1                              | P3MDOUT_B2__OPEN_DRAIN | P3MDOUT_B3__OPEN_DRAIN
 436   1                              | P3MDOUT_B4__PUSH_PULL | P3MDOUT_B7__OPEN_DRAIN;
 437   1              // [P3MDOUT - Port 3 Output Mode]$
 438   1      
 439   1              // $[P3MDIN - Port 3 Input Mode]
 440   1              // [P3MDIN - Port 3 Input Mode]$
 441   1      
 442   1      }
 443          
 444          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 445   1              // $[Timer Initialization]
 446   1              // Save Timer Configuration
 447   1              uint8_t TMR4CN0_TR4_save;
 448   1              SFRPAGE = 0x10;
 449   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 450   1              // Stop Timer
 451   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 452   1              // [Timer Initialization]$
 453   1      
 454   1              // $[TMR4CN1 - Timer 4 Control 1]
 455   1              // [TMR4CN1 - Timer 4 Control 1]$
 456   1      
 457   1              // $[TMR4CN0 - Timer 4 Control]
 458   1              // [TMR4CN0 - Timer 4 Control]$
 459   1      
 460   1              // $[TMR4H - Timer 4 High Byte]
 461   1              /***********************************************************************
 462   1               - Timer 4 High Byte = 0xFE
 463   1               ***********************************************************************/
 464   1              TMR4H = (0xFE << TMR4H_TMR4H__SHIFT);
 465   1              // [TMR4H - Timer 4 High Byte]$
 466   1      
 467   1              // $[TMR4L - Timer 4 Low Byte]
 468   1              /***********************************************************************
 469   1               - Timer 4 Low Byte = 0x68
 470   1               ***********************************************************************/
 471   1              TMR4L = (0x68 << TMR4L_TMR4L__SHIFT);
 472   1              // [TMR4L - Timer 4 Low Byte]$
 473   1      
 474   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 475   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 476   1      
 477   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 478   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 479   1      
 480   1              // $[TMR4CN0]
 481   1              /***********************************************************************
 482   1               - Start Timer 4 running
 483   1               ***********************************************************************/
 484   1              TMR4CN0 |= TMR4CN0_TR4__RUN;
 485   1              // [TMR4CN0]$
 486   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 9   

 487   1              // $[Timer Restoration]
 488   1              // Restore Timer Configuration
 489   1              TMR4CN0 |= TMR4CN0_TR4_save;
 490   1              // [Timer Restoration]$
 491   1      
 492   1      }
 493          
 494          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 495   1              // $[Timer Initialization]
 496   1              //Save Timer Configuration
 497   1              uint8_t TCON_save;
 498   1              TCON_save = TCON;
 499   1              //Stop Timers
 500   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 501   1      
 502   1              // [Timer Initialization]$
 503   1      
 504   1              // $[TH0 - Timer 0 High Byte]
 505   1              // [TH0 - Timer 0 High Byte]$
 506   1      
 507   1              // $[TL0 - Timer 0 Low Byte]
 508   1              // [TL0 - Timer 0 Low Byte]$
 509   1      
 510   1              // $[TH1 - Timer 1 High Byte]
 511   1              /***********************************************************************
 512   1               - Timer 1 High Byte = 0x96
 513   1               ***********************************************************************/
 514   1              TH1 = (0x96 << TH1_TH1__SHIFT);
 515   1              // [TH1 - Timer 1 High Byte]$
 516   1      
 517   1              // $[TL1 - Timer 1 Low Byte]
 518   1              // [TL1 - Timer 1 Low Byte]$
 519   1      
 520   1              // $[Timer Restoration]
 521   1              //Restore Timer Configuration
 522   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 523   1      
 524   1              // [Timer Restoration]$
 525   1      
 526   1      }
 527          
 528          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 529   1              // $[CKCON0 - Clock Control 0]
 530   1              /***********************************************************************
 531   1               - System clock divided by 12
 532   1               - Counter/Timer 0 uses the system clock
 533   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 534   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 535   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 536   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 537   1               - Timer 1 uses the system clock
 538   1               ***********************************************************************/
 539   1              SFRPAGE = 0x00;
 540   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__SYSCLK
 541   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 542   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 543   1                              | CKCON0_T1M__SYSCLK;
 544   1              // [CKCON0 - Clock Control 0]$
 545   1      
 546   1              // $[CKCON1 - Clock Control 1]
 547   1              // [CKCON1 - Clock Control 1]$
 548   1      
 549   1              // $[TMOD - Timer 0/1 Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 10  

 550   1              /***********************************************************************
 551   1               - Mode 0, 13-bit Counter/Timer
 552   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 553   1               - Timer Mode
 554   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 555   1               - Timer Mode
 556   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 557   1               ***********************************************************************/
 558   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 559   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 560   1              // [TMOD - Timer 0/1 Mode]$
 561   1      
 562   1              // $[TCON - Timer 0/1 Control]
 563   1              /***********************************************************************
 564   1               - Start Timer 0 running
 565   1               - Start Timer 1 running
 566   1               ***********************************************************************/
 567   1              TCON |= TCON_TR0__RUN | TCON_TR1__RUN;
 568   1              // [TCON - Timer 0/1 Control]$
 569   1      
 570   1      }
 571          
 572          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 573   1              // $[SCON0 - UART0 Serial Port Control]
 574   1              /***********************************************************************
 575   1               - UART0 reception enabled
 576   1               ***********************************************************************/
 577   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 578   1              // [SCON0 - UART0 Serial Port Control]$
 579   1      
 580   1      }
 581          
 582          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 583   1              // $[Timer Initialization]
 584   1              // Save Timer Configuration
 585   1              uint8_t TMR2CN0_TR2_save;
 586   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 587   1              // Stop Timer
 588   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 589   1              // [Timer Initialization]$
 590   1      
 591   1              // $[TMR2CN1 - Timer 2 Control 1]
 592   1              // [TMR2CN1 - Timer 2 Control 1]$
 593   1      
 594   1              // $[TMR2CN0 - Timer 2 Control]
 595   1              // [TMR2CN0 - Timer 2 Control]$
 596   1      
 597   1              // $[TMR2H - Timer 2 High Byte]
 598   1              // [TMR2H - Timer 2 High Byte]$
 599   1      
 600   1              // $[TMR2L - Timer 2 Low Byte]
 601   1              // [TMR2L - Timer 2 Low Byte]$
 602   1      
 603   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 604   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 605   1      
 606   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 607   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 608   1      
 609   1              // $[TMR2CN0]
 610   1              // [TMR2CN0]$
 611   1      
 612   1              // $[Timer Restoration]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/07/2017 12:08:23 PAGE 11  

 613   1              // Restore Timer Configuration
 614   1              TMR2CN0 |= TMR2CN0_TR2_save;
 615   1              // [Timer Restoration]$
 616   1      
 617   1      }
 618          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    225    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
