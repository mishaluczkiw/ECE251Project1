C51 COMPILER V9.53.0.0   MAIN                                                              05/07/2017 12:29:59 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\varou\S
                    -implicityStudio\v4_workspace1\UART-alpha\src\main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\varou\SimplicityStudio\v4_workspace1\U
                    -ART-alpha\inc\graphics;C:\Users\varou\SimplicityStudio\v4_workspace1\UART-alpha\inc;C:\Users\varou\SimplicityStudio\v4_w
                    -orkspace1\UART-alpha\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/Silico
                    -nLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/
                    -developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/
                    -v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/comm
                    -on/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drive
                    -rs/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\main.lst) COND PAGEWIDTH(12
                    -0) PAGELENGTH(65) OBJECT(.\src\main.OBJ)

line level    source

   1          
   2          #include "bsp.h"
   3          #include "pwr.h"
   4          
   5          #include "draw.h"
   6          #include "tick.h"
   7          #include "InitDevice.h"
   8          #include <stdio.h>
   9          #include <SI_EFM8BB3_Register_Enums.h>
  10          #include "retargetserial.h"
  11          
  12          
  13          //-----------------------------------------------------------------------------
  14          // Local Definitions
  15          //-----------------------------------------------------------------------------
  16          
  17          
  18          SI_SBIT(LEDG, SFR_P1, 4);
  19          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
  20          #define BC_DISCONNECTED 0              // 0 = Board Controller disconnected
  21                                                 //     to EFM8 UART pins
  22          #define BC_CONNECTED    1              // 1 = Board Controller connected
  23          #define UART_BUFFERSIZE        64
  24          
  25          //-----------------------------------------------------------------------------
  26          // Global Variables
  27          //-----------------------------------------------------------------------------
  28          volatile uint8_t UART_Buffer[UART_BUFFERSIZE];
  29          volatile uint8_t UART_Buffer_Size = 0;
  30          volatile uint8_t UART_Input_First = 0;
  31          volatile uint8_t UART_Output_First = 0;
  32          volatile uint8_t TX_Ready =1;
  33          volatile uint8_t Byte = 0;
  34          
  35          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
  36          {
  37   1              LEDG=1;
  38   1                 if (SCON0_RI == 1)
  39   1                 {
  40   2                    if( UART_Buffer_Size == 0)  {    // If new word is entered
  41   3                       UART_Input_First = 0;    }
  42   2      
  43   2                    SCON0_RI = 0;                          // Clear interrupt flag
  44   2      
  45   2                    Byte = SBUF0;                    // Read a character from UART
C51 COMPILER V9.53.0.0   MAIN                                                              05/07/2017 12:29:59 PAGE 2   

  46   2      
  47   2                    if (UART_Buffer_Size < UART_BUFFERSIZE)
  48   2                    {
  49   3                       UART_Buffer[UART_Input_First] = Byte; // Store in array
  50   3      
  51   3                       UART_Buffer_Size++;           // Update array's size
  52   3      
  53   3                       UART_Input_First++;           // Update counter
  54   3                    }
  55   2                 }
  56   1                 if (SCON0_TI == 1)                        // Check if transmit flag is set
  57   1                         {
  58   2                            SCON0_TI = 0;                          // Clear interrupt flag
  59   2      
  60   2                            if (UART_Buffer_Size != 1)       // If buffer not empty
  61   2                            {
  62   3                               // If a new word is being output
  63   3                               if ( UART_Buffer_Size == UART_Input_First ) {
  64   4                                    UART_Output_First = 0;  }
  65   3      
  66   3                               // Store a character in the variable byte
  67   3                               Byte = UART_Buffer[UART_Output_First];
  68   3      
  69   3                               if ((Byte >= 0x61) && (Byte <= 0x7A)) { // If upper case letter
  70   4                                  Byte -= 32; }
  71   3      
  72   3                               SBUF0 = Byte;                 // Transmit to Hyperterminal
  73   3      
  74   3                               UART_Output_First++;          // Update counter
  75   3      
  76   3                               UART_Buffer_Size--;           // Decrease array size
  77   3      
  78   3                            }
  79   2                            else
  80   2                            {
  81   3                               UART_Buffer_Size = 0;         // Set the array size to 0
  82   3                               TX_Ready = 1;                 // Indicate transmission complete
  83   3                            }
  84   2                         }
  85   1      }
  86          
  87          SI_INTERRUPT_USING (TIMER4_ISR, TIMER4_IRQn, 1)
  88          {
  89   1      
  90   1              //TMR4CN0_TF4H = 0;
  91   1      
  92   1      
  93   1                  TMR4CN0_TF4H = 0;
  94   1                      //TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;
  95   1      
  96   1      }
  97          volatile int index = 0;
  98          volatile bool pressed=false;
  99          SI_INTERRUPT(PMATCH_ISR, PMATCH_IRQn)
 100          {
 101   1        uint8_t SFRPAGE_save = SFRPAGE;
 102   1                pressed=true;
 103   1      
 104   1      
 105   1      //  }
 106   1        //LEDG=0;
 107   1        SFRPAGE = PG2_PAGE;
 108   1      
C51 COMPILER V9.53.0.0   MAIN                                                              05/07/2017 12:29:59 PAGE 3   

 109   1        //EIE1 &= ~0x02;                     // Disable Port Match interrupts to
 110   1                                           // prevent multiple interrupts from
 111   1                                           // occurring while the button is
 112   1                                           // pressed
 113   1        SFRPAGE = SFRPAGE_save;
 114   1      }
 115          
 116          //-----------------------------------------------------------------------------
 117          // Example main()
 118          //-----------------------------------------------------------------------------
 119          
 120          volatile char ar[15];
 121          
 122          void main(void)
 123          {
 124   1      
 125   1      
 126   1      //      uint8_t modeSelected = 1;
 127   1              enter_DefaultMode_from_RESET();
 128   1              // Enable all interrupts
 129   1              DISP_Init();
 130   1              BC_EN = 0;               // Board controller connected to EFM8
 131   1              LEDG=0;
 132   1              IE_EA = 1;
 133   1              //UI_getPowerMode(0);
 134   1              // DrawScreenText(powerModeText[0], TEXT_ROW0_Y);
 135   1      
 136   1              // sprintf(ar,"LAP time %.2f sec",time);
 137   1      
 138   1              DrawScreenText("HELLO FRIEND", 10);
 139   1      
 140   1              while(true){
 141   2                      sprintf(ar,"buffer size %d",UART_Buffer_Size);
 142   2                      DrawScreenText(ar, 30);
 143   2                      DrawScreenText(UART_Buffer, 70);
 144   2               if((TX_Ready == 1) && (UART_Buffer_Size != 0) && ((Byte == '\r') || (Byte == '\n') || (Byte == '~')))
 145   2                    {
 146   3                       TX_Ready = 0;                 // Set the flag to zero
 147   3                       SCON0_TI = 1;                 // Set transmit flag to 1
 148   3                       DrawScreenText("ijij", 50);
 149   3                    }
 150   2              }
 151   1      
 152   1      
 153   1      }
 154          
 155          
 156          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     86    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.53.0.0   MAIN                                                              05/07/2017 12:29:59 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
