C51 COMPILER V9.53.0.0   PWR                                                               04/17/2017 15:41:12 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PWR
OBJECT MODULE PLACED IN .\lib\efm8bb3\peripheralDrivers\src\pwr.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\Device\EFM8BB3\peripheral_driver\src\pwr.c OMF2 SMALL DEBUG OBJECTEXTEND R
                    -OM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\v
                    -arou\SimplicityStudio\v4_workspace1\BBB\inc\graphics;C:\Users\varou\SimplicityStudio\v4_workspace1\BBB\inc;C:\Users\varo
                    -u\SimplicityStudio\v4_workspace1\BBB\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/comm
                    -on/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/Simp
                    -licityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/deve
                    -loper/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v
                    -4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//k
                    -its/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shar
                    -ed/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\lib\efm8bb3\per
                    -ipheralDrivers\src\pwr.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib\efm8bb3\peripheralDrivers\src\pwr.OBJ)

line level    source

   1          /******************************************************************************
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "pwr.h"
   8          
   9          // Mask of all wake flags in PSTAT0 (used for reading PSTAT0)
  10          #define PWR_PSTAT0_WAKE_FLAGS (PWR_CPT0_WF | PWR_PMAT_WF | PWR_TMR4_WF | PWR_I2C0_WF | PWR_SPI0_WF | PWR_C
             -L0_WF)
  11          
  12          // Mask of all reset values for wake flags in PSTAT0 (used for clearing PSTAT0)
  13          #define PWR_PSTAT0_WAKE_CLEARS (~PWR_PSTAT0_WAKE_FLAGS) 
  14          
  15          #if (EFM8PDL_PWR_AUTO_PAGE == 1)
  16          #define SAVE_SFRPAGE uint8_t save_sfrpage = SFRPAGE
  17          #define RESTORE_SFRPAGE SFRPAGE = save_sfrpage
  18          #else
              #define SAVE_SFRPAGE
              #define RESTORE_SFRPAGE
              #endif
  22          
  23          // Reads and clears all PSTAT0 wake flags.
  24          uint8_t PWR_readAndClearWakeFlags(void)
  25          {
  26   1        uint8_t save_ie, snapshot_pstat0;
  27   1        SAVE_SFRPAGE;
  28   1        SFRPAGE = 0;
  29   1      
  30   1        // Disable interrupts to minimize time between reading and clearing the flags
  31   1        save_ie = IE;
  32   1        IE_EA = 0;
  33   1      
  34   1        // Snapshot the wake-up source flags, then clear them
  35   1        snapshot_pstat0 = PSTAT0 & PWR_PSTAT0_WAKE_FLAGS;
  36   1        PSTAT0 &= PWR_PSTAT0_WAKE_CLEARS;
  37   1      
  38   1        // Now restore the interrupt enable
  39   1        IE = save_ie;
  40   1        RESTORE_SFRPAGE;
  41   1      
  42   1        // Return snapshot
  43   1        return snapshot_pstat0;
  44   1      }
C51 COMPILER V9.53.0.0   PWR                                                               04/17/2017 15:41:12 PAGE 2   

  45          
  46          void PWR_enterIdle(void)
  47          {
  48   1        SAVE_SFRPAGE;
  49   1        SFRPAGE = 0;
  50   1      
  51   1        // Set the IDLE bit followed by a 3-cycle dummy instruction to ensure the
  52   1        // CPU wakes under all conditions (see ref manual)
  53   1        PCON0 |= PCON0_IDLE__IDLE;
  54   1        PCON0 = PCON0;
  55   1      
  56   1        RESTORE_SFRPAGE;
  57   1      }
  58          
  59          #if (EFM8PDL_PWR_USE_STOP == 1)
  60          void PWR_enterStop(void)
  61          {
  62   1        // No need to service interrupts or save the SFRPAGE since the device
  63   1        // will be stopped
  64   1        IE_EA = 0;
  65   1        SFRPAGE = 0;
  66   1        
  67   1        // Clock source must be HFOSC0 for lowest power (see ref manual)
  68   1        // Enable HFOSC0 then source the system clock from it
  69   1        HFOCN |= HFOCN_HFO0EN__ENABLED;
  70   1        CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
  71   1        while((CLKSEL & CLKSEL_DIVRDY__BMASK) == 0);
  72   1        
  73   1        // Set the STOP bit
  74   1        PCON0 |= PCON0_STOP__BMASK;
  75   1      
  76   1        // NOTE: Reset is required to exit stop mode. Program execution
  77   1        // will not continue to this point.
  78   1      }
  79          #endif // EFM8PDL_PWR_USE_STOP
  80          
  81          void PWR_enterSuspend(void)
  82          {
  83   1        uint8_t save_ie, save_clksel;
  84   1        SAVE_SFRPAGE;
  85   1        SFRPAGE = 0;
  86   1      
  87   1        // Disable interrupts until the system is awake and restored
  88   1        save_ie = IE;
  89   1        IE_EA = 0;
  90   1        
  91   1        // System clock must be HFOSC0 (see ref manual)
  92   1        // Set the system clock to HFOSC0 / 1
  93   1        save_clksel = CLKSEL;
  94   1        HFOCN |= HFOCN_HFO0EN__ENABLED;
  95   1        CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
  96   1        while((CLKSEL & CLKSEL_DIVRDY__BMASK) == 0);
  97   1      
  98   1        // Enter suspend mode
  99   1        PCON1 |= PCON1_SUSPEND__SUSPEND;
 100   1      
 101   1        // Next restore the system clock source and divider
 102   1        CLKSEL = save_clksel;
 103   1        while((CLKSEL & CLKSEL_DIVRDY__BMASK) == 0);
 104   1      
 105   1        // Finally restore the interrupt enable
 106   1        IE = save_ie;
 107   1        RESTORE_SFRPAGE;
C51 COMPILER V9.53.0.0   PWR                                                               04/17/2017 15:41:12 PAGE 3   

 108   1      }
 109          
 110          void PWR_enterSnooze(void)
 111          {
 112   1        uint8_t save_ie, save_clksel;
 113   1        SAVE_SFRPAGE;
 114   1        SFRPAGE = 0;
 115   1      
 116   1        // Disable interrupts until the system is awake and restored
 117   1        save_ie = IE;
 118   1        IE_EA = 0;
 119   1        
 120   1        // System clock must be HFOSC0 (see ref manual)
 121   1        // Set the system clock to HFOSC0 / 1
 122   1        save_clksel = CLKSEL;
 123   1        CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
 124   1        while((CLKSEL & CLKSEL_DIVRDY__BMASK) == 0);
 125   1      
 126   1        // Enter suspend mode
 127   1        PCON1 |= PCON1_SNOOZE__SNOOZE;
 128   1        
 129   1        // Next restore the system clock source and divider
 130   1        CLKSEL = save_clksel;
 131   1        while((CLKSEL & CLKSEL_DIVRDY__BMASK) == 0);
 132   1      
 133   1        // Finally restore the interrupt enable
 134   1        IE = save_ie;
 135   1        RESTORE_SFRPAGE;
 136   1      }
 137          
 138          void PWR_enterShutdown(void)
 139          {
 140   1        // No need to service interrupts or save the SFRPAGE since the device
 141   1        // will be stopped
 142   1        IE_EA = 0;
 143   1        SFRPAGE = 0;
 144   1      
 145   1        // Set the STOPCF bit to shutdown regulator 
 146   1        REG0CN |= REG0CN_STOPCF__SHUTDOWN;
 147   1      
 148   1        // Set the STOP bit
 149   1        PCON0 |= PCON0_STOP__BMASK;
 150   1      
 151   1        // NOTE: Reset is required to exit stop mode. Program execution
 152   1        // will not continue to this point.
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    136    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
