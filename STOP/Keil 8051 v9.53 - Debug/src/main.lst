C51 COMPILER V9.53.0.0   MAIN                                                              04/09/2017 19:13:10 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\varou\S
                    -implicityStudio\v4_workspace1\STOP\src\main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPT
                    -IMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\varou\SimplicityStudio\v4_workspace1\STOP\in
                    -c;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudi
                    -o/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\s
                    -rc\main.OBJ)

line level    source

   1          
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include <SI_EFM8BB3_Register_Enums.h>
   6          #include <InitDevice.h>
   7          #include "bsp.h"
   8          #include "bsp_config.h"
   9          #include "disp.h"
  10          #include "render.h"
  11          #include <stdio.h>
  12          //-----------------------------------------------------------------------------
  13          // Pin Definitions
  14          //-----------------------------------------------------------------------------
  15          SI_SBIT (DISP_EN, SFR_P3, 4);          // Display Enable
  16          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  17          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  18          #define RETARGET_SPRINTF        sprintf
  19          
  20          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  21          
  22          //SI_SBIT(LED0, SFR_P1, 4);                  // P1.4 LED0
  23          //SI_SBIT(LED1, SFR_P1, 5);                  // P1.5 LED1
  24          //SI_SBIT(LED2, SFR_P1, 6);
  25          
  26          volatile double total[1]=1000;
  27          volatile int lap[1];
  28          double laptimes [5];
  29          
  30          static void drawScreenFrequency(void);
  31          static void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum);
  32          
  33          
  34          volatile int C=-1;
  35          
  36          bool pressed=false;
  37          //int C=2;
  38          //-----------------------------------------------------------------------------
  39          // Main Routine
  40          //-----------------------------------------------------------------------------
  41          void main (void)
  42          {   enter_DefaultMode_from_RESET();
  43   1         DISP_Init();
  44   1         IE_EA = 0;
  45   1      
  46   1         while(1){
  47   2      
  48   2      
  49   2                 while(1){
  50   3                                 if ((BSP_PB0 == BSP_PB_PRESSED)==false  ){
  51   4                                         pressed=false;
C51 COMPILER V9.53.0.0   MAIN                                                              04/09/2017 19:13:10 PAGE 2   

  52   4                                 }
  53   3      
  54   3                                if (BSP_PB0 == BSP_PB_PRESSED && !pressed ){
  55   4                                              pressed=true;
  56   4                                              break;
  57   4                                 }
  58   3      
  59   3                         }
  60   2                 pressed=false;
  61   2                 IE_EA = 1;
  62   2                 while(1){
  63   3                       /*  if ((BSP_PB0 == BSP_PB_PRESSED)==false && (BSP_PB1 == BSP_PB_PRESSED)==false ){
  64   3                                 pressed=false;
  65   3                         }
  66   3      
  67   3                        if (BSP_PB0 == BSP_PB_PRESSED && !pressed ){
  68   3                                      pressed=true;
  69   3                                      C++;
  70   3                                      if(C>4){
  71   3                                              C=0;
  72   3                                      }
  73   3                         break;
  74   3                         }
  75   3                         if (BSP_PB1 == BSP_PB_PRESSED && !pressed ){
  76   3                                 pressed=true;
  77   3                                 C--;
  78   3                                 if(C<0){
  79   3                                         C=4;
  80   3                                 }
  81   3                                 break;
  82   3                         }  */
  83   3                      drawScreenFrequency();
  84   3                         }
  85   2      
  86   2      
  87   2      
  88   2      
  89   2              }
  90   1      
  91   1      }
  92          
  93          
  94          static void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum)
  95          {
  96   1        uint8_t i;
  97   1      
  98   1        for (i = 0; i < FONT_HEIGHT; i++)
  99   1        {
 100   2          RENDER_ClrLine(Line);
 101   2          RENDER_StrLine(Line, 4, i, str);
 102   2          DISP_WriteLine(rowNum + i, Line);
 103   2        }
 104   1      }
 105          
 106          static void drawScreenFrequency(void)
 107          {
 108   1        char freqStr[22];
 109   1      
 110   1        // display frequency on screen
 111   1        RETARGET_SPRINTF(freqStr, "  Current Time = %d sec", total[0]);
 112   1      
 113   1        drawScreenText(freqStr, 20);
 114   1      }
C51 COMPILER V9.53.0.0   MAIN                                                              04/09/2017 19:13:10 PAGE 3   

 115          
 116          //
 117          int CLKCOUNT = 0;
 118          //-----------------------------------------------------------------------------
 119          // Global CONSTANTS
 120          //-----------------------------------------------------------------------------
 121          
 122          //-----------------------------------------------------------------------------
 123          // TIMER2_ISR
 124          //-----------------------------------------------------------------------------
 125          //
 126          // TIMER2 ISR Content goes here. Remember to clear flag bits:
 127          // TMR2CN::TF2H (Timer # High Byte Overflow Flag)
 128          // TMR2CN::TF2L (Timer # Low Byte Overflow Flag)
 129          //
 130          // This routine changes the state of the LED whenever Timer2 overflows.
 131          //
 132          //-----------------------------------------------------------------------------
 133          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
 134          {
 135   1              TMR2CN0_TF2H = 0;    // Clear Timer2 interrupt flag
 136   1              total[0]=total[0]+1;
 137   1      
 138   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    227    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30      27
   IDATA SIZE       =     16    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
