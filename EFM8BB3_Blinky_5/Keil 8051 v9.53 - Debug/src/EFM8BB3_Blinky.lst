C51 COMPILER V9.53.0.0   EFM8BB3_BLINKY                                                    03/30/2017 14:16:44 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB3_BLINKY
OBJECT MODULE PLACED IN .\src\EFM8BB3_Blinky.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\varou\S
                    -implicityStudio\v4_workspace1\EFM8BB3_Blinky_5\src\EFM8BB3_Blinky.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVE
                    -L(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\varou\SimplicityStudio
                    -\v4_workspace1\EFM8BB3_Blinky_5\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051b
                    -ase;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\EFM8BB3_Blinky.lst) C
                    -OND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8BB3_Blinky.OBJ)

line level    source

   1          
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include <SI_EFM8BB3_Register_Enums.h>
   6          #include <InitDevice.h>
   7          #include "bsp.h"
   8          #include "bsp_config.h"
   9          
  10          //-----------------------------------------------------------------------------
  11          // Pin Definitions
  12          //-----------------------------------------------------------------------------
  13          SI_SBIT (DISP_EN, SFR_P3, 4);          // Display Enable
  14          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  15          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  16          
  17          //SI_SBIT(LED0, SFR_P1, 4);                  // P1.4 LED0
  18          //SI_SBIT(LED1, SFR_P1, 5);                  // P1.5 LED1
  19          //SI_SBIT(LED2, SFR_P1, 6);
  20          
  21          volatile uint8_t outb[5][6];
  22          
  23          
  24          
  25          volatile int C=-1;
  26          
  27          extern void choose(int B);
  28          void square(void);
  29          bool pressed=false;
  30          //int C=2;
  31          //-----------------------------------------------------------------------------
  32          // Main Routine
  33          //-----------------------------------------------------------------------------
  34          void main (void)
  35          {   enter_DefaultMode_from_RESET();
  36   1      outb[0][0]=0; outb[0][1]=1; outb[0][2]=1; outb[0][3]=1; outb[0][4]=1; outb[0][5]=1;
  37   1      outb[1][0]=0; outb[1][1]=0; outb[1][2]=0; outb[1][3]=0; outb[1][4]=0; outb[1][5]=0;
  38   1      outb[2][0]=1; outb[2][1]=0; outb[2][2]=0; outb[2][3]=0; outb[2][4]=0; outb[2][5]=1;
  39   1      outb[3][0]=0; outb[3][1]=1; outb[3][2]=0; outb[3][3]=0; outb[3][4]=0; outb[3][5]=1;
  40   1      outb[4][0]=0; outb[4][1]=0; outb[4][2]=1; outb[4][3]=0; outb[4][4]=0; outb[4][5]=1;
  41   1      
  42   1         DISP_EN = DISP_BC_DRIVEN; // Display not driven by EFM8
  43   1         IE_EA = 0;
  44   1         //out();
  45   1         while(1){
  46   2      
  47   2      
  48   2                 DISP_EN = DISP_BC_DRIVEN;           // EFM8 does not drive display
  49   2                 while(1){
  50   3                         if ((BSP_PB0 == BSP_PB_PRESSED)==false && (BSP_PB1 == BSP_PB_PRESSED)==false ){
  51   4                                 pressed=false;
C51 COMPILER V9.53.0.0   EFM8BB3_BLINKY                                                    03/30/2017 14:16:44 PAGE 2   

  52   4                         }
  53   3      
  54   3                        if (BSP_PB0 == BSP_PB_PRESSED && !pressed ){
  55   4                                      pressed=true;
  56   4                                      C++;
  57   4                                      if(C>4){
  58   5                                              C=0;
  59   5                                      }
  60   4                         break;
  61   4                         }
  62   3                         if (BSP_PB1 == BSP_PB_PRESSED && !pressed ){
  63   4                                 pressed=true;
  64   4                                 C--;
  65   4                                 if(C<0){
  66   5                                         C=4;
  67   5                                 }
  68   4                                 break;
  69   4                         }
  70   3                 }
  71   2      
  72   2      
  73   2                 square();
  74   2                /* switch(C){
  75   2                         case 0:
  76   2                                 outb[0]=0; outb[1]=1; outb[2]=0; outb[3]=1; outb[4]=0; outb[5]=1; outb[6]=0;
  77   2                                 square();
  78   2                                 break;
  79   2                         case 1:
  80   2                                 outb[0]=1; outb[1]=1; outb[2]=1; outb[3]=0; outb[4]=0; outb[5]=0; outb[6]=0;
  81   2                                 square();
  82   2                                 break;
  83   2                         case 2:
  84   2                                  outb[0]=0; outb[1]=0; outb[2]=0; outb[3]=0; outb[4]=1; outb[5]=1; outb[6]=1;
  85   2                                  square();
  86   2                                  break;
  87   2                         case 3:
  88   2                                  outb[0]=1; outb[1]=0; outb[2]=1; outb[3]=0; outb[4]=1; outb[5]=0; outb[6]=1;
  89   2                                  square();
  90   2                                       break;
  91   2                         case 4:
  92   2                          outb[0]=1; outb[1]=1; outb[2]=1; outb[3]=1; outb[4]=1; outb[5]=1; outb[6]=1;
  93   2                                  square();
  94   2                                  break;
  95   2                 }
  96   2                 */
  97   2                 //square();
  98   2              }
  99   1      
 100   1      }
 101          
 102          extern void choose(int B){
 103   1              switch(B){
 104   2              case 0:
 105   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 106   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 107   2                      break;
 108   2              case 1:
 109   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_2;
 110   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_2;
 111   2                      break;
 112   2              case 2:
 113   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_4;
 114   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_4;
C51 COMPILER V9.53.0.0   EFM8BB3_BLINKY                                                    03/30/2017 14:16:44 PAGE 3   

 115   2                      break;
 116   2              case 3:
 117   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_8;
 118   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_8;
 119   2                      break;
 120   2              case 4:
 121   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_16;
 122   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_16;
 123   2                      break;
 124   2              case 5:
 125   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_32;
 126   2                      CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_32;
 127   2                      break;
 128   2              }
 129   1      
 130   1              while (CLKSEL & CLKSEL_DIVRDY__BMASK == CLKSEL_DIVRDY__NOT_READY)
 131   1                      ;
 132   1      }
 133          
 134          
 135          void square(void){
 136   1              IE_EA=1;
 137   1              while(1){
 138   2                      if(IE_EA==0){
 139   3                              break;
 140   3                      }
 141   2              }
 142   1      }
 143          
 144          
 145          //
 146          int CLKCOUNT = 0;
 147          //-----------------------------------------------------------------------------
 148          // Global CONSTANTS
 149          //-----------------------------------------------------------------------------
 150          SI_SBIT(CLK, SFR_P1, 1);
 151          SI_SBIT(BIT0, SFR_P1, 2);                  // P1.4 LED0
 152          SI_SBIT(BIT1, SFR_P1, 3);
 153          SI_SBIT(BIT2, SFR_P1, 4);                  // P1.4 LED0
 154          SI_SBIT(BIT3, SFR_P1, 5);                  // P1.5 LED1
 155          SI_SBIT(BIT4, SFR_P1, 6);                                       // P1.6 LED2
 156          SI_SBIT(BIT5, SFR_P1, 7);
 157          
 158          //-----------------------------------------------------------------------------
 159          // TIMER2_ISR
 160          //-----------------------------------------------------------------------------
 161          //
 162          // TIMER2 ISR Content goes here. Remember to clear flag bits:
 163          // TMR2CN::TF2H (Timer # High Byte Overflow Flag)
 164          // TMR2CN::TF2L (Timer # Low Byte Overflow Flag)
 165          //
 166          // This routine changes the state of the LED whenever Timer2 overflows.
 167          //
 168          //-----------------------------------------------------------------------------
 169          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
 170          {
 171   1              TMR2CN0_TF2H = 0;    // Clear Timer2 interrupt flag
 172   1              //int N=0;
 173   1      
 174   1              switch (CLKCOUNT)
 175   1              {
 176   2                      case 0:
 177   2      
C51 COMPILER V9.53.0.0   EFM8BB3_BLINKY                                                    03/30/2017 14:16:44 PAGE 4   

 178   2                              BIT0=outb[C][0];
 179   2                              BIT1=outb[C][1];
 180   2                              BIT2=outb[C][2];
 181   2                              BIT3=outb[C][3];
 182   2                              BIT4=outb[C][4];
 183   2                              BIT5=outb[C][5];
 184   2                              /*for(n=0; n<=1000; n++){
 185   2                                      Nop();
 186   2                              }
 187   2                              CLK=1; */
 188   2                         break;
 189   2                      case 1:
 190   2                         CLK=1;
 191   2                         break;
 192   2                      case 2:
 193   2                         CLK=0;
 194   2                         IE_EA=0;
 195   2                         break;
 196   2      
 197   2              }
 198   1              if (CLKCOUNT <= 1) CLKCOUNT++;
 199   1              else CLKCOUNT = 0;
 200   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    419    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
