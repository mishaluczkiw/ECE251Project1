C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\student
                    -\ECE251Project1\Stop2\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8
                    -,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\student\ECE251Project1\Stop2\inc\graphics;C:\Users\
                    -student\ECE251Project1\Stop2\inc;C:\Users\student\ECE251Project1\Stop2\inc\config;C:/SiliconLabs/SimplicityStudio/v4/dev
                    -eloper/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLS
                    -TK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/Si
                    -liconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;C:/SiliconLabs/SimplicityStu
                    -dio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/
                    -sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/805
                    -1/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//
                    -Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc;C:/SiliconLab
                    -s/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_retargetserial) PRINT(.\src\InitDevice.lst) C
                    -OND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          #include "function_generator.h"
  13          
  14          // USER PROTOTYPES
  15          // USER FUNCTIONS
  16          
  17          // $[Library Includes]
  18          // [Library Includes]$
  19          
  20          //==============================================================================
  21          // enter_DefaultMode_from_RESET
  22          //==============================================================================
  23          extern void enter_DefaultMode_from_RESET(void) {
  24   1              // $[Config Calls]
  25   1              // Save the SFRPAGE
  26   1              uint8_t SFRPAGE_save = SFRPAGE;
  27   1              WDT_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_0_enter_DefaultMode_from_RESET();
  29   1              PORTS_1_enter_DefaultMode_from_RESET();
  30   1              PORTS_2_enter_DefaultMode_from_RESET();
  31   1              PORTS_3_enter_DefaultMode_from_RESET();
  32   1              PBCFG_0_enter_DefaultMode_from_RESET();
  33   1              CLOCK_0_enter_DefaultMode_from_RESET();
  34   1              TIMER01_0_enter_DefaultMode_from_RESET();
  35   1              TIMER16_3_enter_DefaultMode_from_RESET();
  36   1              TIMER16_4_enter_DefaultMode_from_RESET();
  37   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  38   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  39   1              // Restore the SFRPAGE
  40   1              SFRPAGE = SFRPAGE_save;
  41   1              // [Config Calls]$
  42   1      
  43   1      }
  44          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 2   

  45          //================================================================================
  46          // WDT_0_enter_DefaultMode_from_RESET
  47          //================================================================================
  48          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  49   1              // $[WDTCN - Watchdog Timer Control]
  50   1              SFRPAGE = 0x00;
  51   1              //Disable Watchdog with key sequence
  52   1              WDTCN = 0xDE; //First key
  53   1              WDTCN = 0xAD; //Second key
  54   1              // [WDTCN - Watchdog Timer Control]$
  55   1      
  56   1      }
  57          
  58          //================================================================================
  59          // PORTS_0_enter_DefaultMode_from_RESET
  60          //================================================================================
  61          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  62   1              // $[P0 - Port 0 Pin Latch]
  63   1              // [P0 - Port 0 Pin Latch]$
  64   1      
  65   1              // $[P0MDOUT - Port 0 Output Mode]
  66   1              /***********************************************************************
  67   1               - P0.0 output is open-drain
  68   1               - P0.1 output is open-drain
  69   1               - P0.2 output is open-drain
  70   1               - P0.3 output is open-drain
  71   1               - P0.4 output is open-drain
  72   1               - P0.5 output is open-drain
  73   1               - P0.6 output is push-pull
  74   1               - P0.7 output is open-drain
  75   1               ***********************************************************************/
  76   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
  77   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
  78   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
  79   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
  80   1              // [P0MDOUT - Port 0 Output Mode]$
  81   1      
  82   1              // $[P0MDIN - Port 0 Input Mode]
  83   1              /***********************************************************************
  84   1               - P0.0 pin is configured for analog mode
  85   1               - P0.1 pin is configured for digital mode
  86   1               - P0.2 pin is configured for digital mode
  87   1               - P0.3 pin is configured for digital mode
  88   1               - P0.4 pin is configured for digital mode
  89   1               - P0.5 pin is configured for digital mode
  90   1               - P0.6 pin is configured for digital mode
  91   1               - P0.7 pin is configured for digital mode
  92   1               ***********************************************************************/
  93   1              P0MDIN = P0MDIN_B0__ANALOG | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
  94   1                              | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
  95   1                              | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
  96   1              // [P0MDIN - Port 0 Input Mode]$
  97   1      
  98   1              // $[P0SKIP - Port 0 Skip]
  99   1              /***********************************************************************
 100   1               - P0.0 pin is skipped by the crossbar
 101   1               - P0.1 pin is skipped by the crossbar
 102   1               - P0.2 pin is skipped by the crossbar
 103   1               - P0.3 pin is skipped by the crossbar
 104   1               - P0.4 pin is skipped by the crossbar
 105   1               - P0.5 pin is skipped by the crossbar
 106   1               - P0.6 pin is not skipped by the crossbar
 107   1               - P0.7 pin is not skipped by the crossbar
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 3   

 108   1               ***********************************************************************/
 109   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 110   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 111   1                              | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 112   1              // [P0SKIP - Port 0 Skip]$
 113   1      
 114   1              // $[P0MASK - Port 0 Mask]
 115   1              /***********************************************************************
 116   1               - P0.0 pin logic value is ignored and will not cause a port mismatch
 117   1               event
 118   1               - P0.1 pin logic value is ignored and will not cause a port mismatch
 119   1               event
 120   1               - P0.2 pin logic value is compared to P0MAT.2
 121   1               - P0.3 pin logic value is compared to P0MAT.3
 122   1               - P0.4 pin logic value is ignored and will not cause a port mismatch
 123   1               event
 124   1               - P0.5 pin logic value is ignored and will not cause a port mismatch
 125   1               event
 126   1               - P0.6 pin logic value is ignored and will not cause a port mismatch
 127   1               event
 128   1               - P0.7 pin logic value is ignored and will not cause a port mismatch
 129   1               event
 130   1               ***********************************************************************/
 131   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__COMPARED
 132   1                              | P0MASK_B3__COMPARED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 133   1                              | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
 134   1              // [P0MASK - Port 0 Mask]$
 135   1      
 136   1              // $[P0MAT - Port 0 Match]
 137   1              // [P0MAT - Port 0 Match]$
 138   1      
 139   1      }
 140          
 141          //================================================================================
 142          // PORTS_1_enter_DefaultMode_from_RESET
 143          //================================================================================
 144          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 145   1              // $[P1 - Port 1 Pin Latch]
 146   1              // [P1 - Port 1 Pin Latch]$
 147   1      
 148   1              // $[P1MDOUT - Port 1 Output Mode]
 149   1              /***********************************************************************
 150   1               - P1.0 output is push-pull
 151   1               - P1.1 output is open-drain
 152   1               - P1.2 output is open-drain
 153   1               - P1.3 output is open-drain
 154   1               - P1.4 output is push-pull
 155   1               - P1.5 output is push-pull
 156   1               - P1.6 output is push-pull
 157   1               - P1.7 output is open-drain
 158   1               ***********************************************************************/
 159   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 160   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 161   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 162   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
 163   1              // [P1MDOUT - Port 1 Output Mode]$
 164   1      
 165   1              // $[P1MDIN - Port 1 Input Mode]
 166   1              /***********************************************************************
 167   1               - P1.0 pin is configured for digital mode
 168   1               - P1.1 pin is configured for analog mode
 169   1               - P1.2 pin is configured for digital mode
 170   1               - P1.3 pin is configured for digital mode
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 4   

 171   1               - P1.4 pin is configured for digital mode
 172   1               - P1.5 pin is configured for digital mode
 173   1               - P1.6 pin is configured for digital mode
 174   1               - P1.7 pin is configured for analog mode
 175   1               ***********************************************************************/
 176   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__ANALOG | P1MDIN_B2__DIGITAL
 177   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 178   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 179   1              // [P1MDIN - Port 1 Input Mode]$
 180   1      
 181   1              // $[P1SKIP - Port 1 Skip]
 182   1              /***********************************************************************
 183   1               - P1.0 pin is not skipped by the crossbar
 184   1               - P1.1 pin is skipped by the crossbar
 185   1               - P1.2 pin is skipped by the crossbar
 186   1               - P1.3 pin is skipped by the crossbar
 187   1               - P1.4 pin is not skipped by the crossbar
 188   1               - P1.5 pin is not skipped by the crossbar
 189   1               - P1.6 pin is not skipped by the crossbar
 190   1               - P1.7 pin is skipped by the crossbar
 191   1               ***********************************************************************/
 192   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 193   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__NOT_SKIPPED
 194   1                              | P1SKIP_B5__NOT_SKIPPED | P1SKIP_B6__NOT_SKIPPED
 195   1                              | P1SKIP_B7__SKIPPED;
 196   1              // [P1SKIP - Port 1 Skip]$
 197   1      
 198   1              // $[P1MASK - Port 1 Mask]
 199   1              // [P1MASK - Port 1 Mask]$
 200   1      
 201   1              // $[P1MAT - Port 1 Match]
 202   1              // [P1MAT - Port 1 Match]$
 203   1      
 204   1      }
 205          
 206          //================================================================================
 207          // PORTS_2_enter_DefaultMode_from_RESET
 208          //================================================================================
 209          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 210   1              // $[P2 - Port 2 Pin Latch]
 211   1              // [P2 - Port 2 Pin Latch]$
 212   1      
 213   1              // $[P2MDOUT - Port 2 Output Mode]
 214   1              /***********************************************************************
 215   1               - P2.0 output is open-drain
 216   1               - P2.1 output is open-drain
 217   1               - P2.2 output is open-drain
 218   1               - P2.3 output is open-drain
 219   1               - P2.4 output is open-drain
 220   1               - P2.5 output is open-drain
 221   1               - P2.6 output is push-pull
 222   1               ***********************************************************************/
 223   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 224   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__OPEN_DRAIN
 225   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 226   1                              | P2MDOUT_B6__PUSH_PULL;
 227   1              // [P2MDOUT - Port 2 Output Mode]$
 228   1      
 229   1              // $[P2MDIN - Port 2 Input Mode]
 230   1              // [P2MDIN - Port 2 Input Mode]$
 231   1      
 232   1              // $[P2SKIP - Port 2 Skip]
 233   1              /***********************************************************************
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 5   

 234   1               - P2.0 pin is not skipped by the crossbar
 235   1               - P2.1 pin is not skipped by the crossbar
 236   1               - P2.2 pin is not skipped by the crossbar
 237   1               - P2.3 pin is skipped by the crossbar
 238   1               ***********************************************************************/
 239   1              SFRPAGE = 0x20;
 240   1              P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 241   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 242   1              // [P2SKIP - Port 2 Skip]$
 243   1      
 244   1              // $[P2MASK - Port 2 Mask]
 245   1              // [P2MASK - Port 2 Mask]$
 246   1      
 247   1              // $[P2MAT - Port 2 Match]
 248   1              // [P2MAT - Port 2 Match]$
 249   1      
 250   1      }
 251          
 252          //================================================================================
 253          // PORTS_3_enter_DefaultMode_from_RESET
 254          //================================================================================
 255          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 256   1              // $[P3 - Port 3 Pin Latch]
 257   1              // [P3 - Port 3 Pin Latch]$
 258   1      
 259   1              // $[P3MDOUT - Port 3 Output Mode]
 260   1              // [P3MDOUT - Port 3 Output Mode]$
 261   1      
 262   1              // $[P3MDIN - Port 3 Input Mode]
 263   1              /***********************************************************************
 264   1               - P3.0 pin is configured for analog mode
 265   1               - P3.1 pin is configured for analog mode
 266   1               - P3.2 pin is configured for digital mode
 267   1               - P3.3 pin is configured for digital mode
 268   1               - P3.4 pin is configured for digital mode
 269   1               - P3.7 pin is configured for digital mode
 270   1               ***********************************************************************/
 271   1              P3MDIN = P3MDIN_B0__ANALOG | P3MDIN_B1__ANALOG | P3MDIN_B2__DIGITAL
 272   1                              | P3MDIN_B3__DIGITAL | P3MDIN_B4__DIGITAL | P3MDIN_B7__DIGITAL;
 273   1              // [P3MDIN - Port 3 Input Mode]$
 274   1      
 275   1      }
 276          
 277          //================================================================================
 278          // PBCFG_0_enter_DefaultMode_from_RESET
 279          //================================================================================
 280          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 281   1              // $[XBR2 - Port I/O Crossbar 2]
 282   1              /***********************************************************************
 283   1               - Weak Pullups enabled 
 284   1               - Crossbar enabled
 285   1               - UART1 I/O unavailable at Port pin
 286   1               - UART1 RTS1 unavailable at Port pin
 287   1               - UART1 CTS1 unavailable at Port pin
 288   1               ***********************************************************************/
 289   1              SFRPAGE = 0x00;
 290   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 291   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 292   1                              | XBR2_URT1CTSE__DISABLED;
 293   1              // [XBR2 - Port I/O Crossbar 2]$
 294   1      
 295   1              // $[PRTDRV - Port Drive Strength]
 296   1              // [PRTDRV - Port Drive Strength]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 6   

 297   1      
 298   1              // $[XBR0 - Port I/O Crossbar 0]
 299   1              // [XBR0 - Port I/O Crossbar 0]$
 300   1      
 301   1              // $[XBR1 - Port I/O Crossbar 1]
 302   1              /***********************************************************************
 303   1               - CEX0, CEX1, CEX2 routed to Port pins
 304   1               - ECI unavailable at Port pin
 305   1               - T0 unavailable at Port pin
 306   1               - T1 unavailable at Port pin
 307   1               - T2 unavailable at Port pin
 308   1               ***********************************************************************/
 309   1              XBR1 = XBR1_PCA0ME__CEX0_TO_CEX2 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 310   1                              | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 311   1              // [XBR1 - Port I/O Crossbar 1]$
 312   1      
 313   1      }
 314          
 315          //================================================================================
 316          // ADC_0_enter_DefaultMode_from_RESET
 317          //================================================================================
 318          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 319   1              // $[ADC0CN2 - ADC0 Control 2]
 320   1              // [ADC0CN2 - ADC0 Control 2]$
 321   1      
 322   1              // $[ADC0CN1 - ADC0 Control 1]
 323   1              /*
 324   1               // ADBITS (Resolution Control) = 10_BIT (ADC0 operates in 10-bit mode.)
 325   1               // ADSJST (Accumulator Shift and Justify) = RIGHT_NO_SHIFT (Right
 326   1               //     justified. No shifting applied.)
 327   1               // ADRPT (Repeat Count) = ACC_1 (Perform and Accumulate 1 conversion.)
 328   1               */
 329   1              ADC0CN1 = ADC0CN1_ADBITS__10_BIT | ADC0CN1_ADSJST__RIGHT_NO_SHIFT
 330   1                              | ADC0CN1_ADRPT__ACC_1;
 331   1              // [ADC0CN1 - ADC0 Control 1]$
 332   1      
 333   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 334   1              /*
 335   1               // ADC0MX (AMUX0 Positive Input Selection) = ADC0P13 (Select ADC0.13.)
 336   1               */
 337   1              ADC0MX = ADC0MX_ADC0MX__ADC0P13;
 338   1              // [ADC0MX - ADC0 Multiplexer Selection]$
 339   1      
 340   1              // $[ADC0CF2 - ADC0 Power Control]
 341   1              /*
 342   1               // GNDSL (Analog Ground Reference) = GND_PIN (The ADC0 ground reference
 343   1               //     is the GND pin.)
 344   1               // REFSL (Voltage Reference Select) = VDD_PIN (The ADC0 voltage reference
 345   1               //     is the VDD pin.)
 346   1               // ADPWR (Power Up Delay Time) = 0x1F
 347   1               */
 348   1              ADC0CF2 = ADC0CF2_GNDSL__GND_PIN | ADC0CF2_REFSL__VDD_PIN
 349   1                              | (0x1F << ADC0CF2_ADPWR__SHIFT);
 350   1              // [ADC0CF2 - ADC0 Power Control]$
 351   1      
 352   1              // $[ADC0CF0 - ADC0 Configuration]
 353   1              /*
 354   1               // ADCLKSEL (ADC Clock Select) = SYSCLK (ADCCLK = SYSCLK.)
 355   1               // ADSC (SAR Clock Divider) = 0x01
 356   1               */
 357   1              ADC0CF0 = ADC0CF0_ADCLKSEL__SYSCLK | (0x01 << ADC0CF0_ADSC__SHIFT);
 358   1              // [ADC0CF0 - ADC0 Configuration]$
 359   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 7   

 360   1              // $[ADC0CF1 - ADC0 Configuration]
 361   1              /*
 362   1               // ADLPM (Low Power Mode Enable) = LP_DISABLED (Disable low power
 363   1               //     mode.)
 364   1               // ADTK (Conversion Tracking Time) = 0x01
 365   1               */
 366   1              ADC0CF1 = ADC0CF1_ADLPM__LP_DISABLED | (0x01 << ADC0CF1_ADTK__SHIFT);
 367   1              // [ADC0CF1 - ADC0 Configuration]$
 368   1      
 369   1              // $[ADC0ASAL - ADC0 Autoscan Start Address Low Byte]
 370   1              // [ADC0ASAL - ADC0 Autoscan Start Address Low Byte]$
 371   1      
 372   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 373   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 374   1      
 375   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 376   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 377   1      
 378   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 379   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 380   1      
 381   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
 382   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 383   1      
 384   1              // $[ADC0ASCF - ADC0 Autoscan Configuration]
 385   1              // [ADC0ASCF - ADC0 Autoscan Configuration]$
 386   1      
 387   1              // $[ADC0CN0 - ADC0 Control 0]
 388   1              /*
 389   1               // ADEN (ADC Enable) = ENABLED (Enable ADC0 (active and ready for data
 390   1               //     conversions).)
 391   1               */
 392   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 393   1              // [ADC0CN0 - ADC0 Control 0]$
 394   1      
 395   1      }
 396          
 397          //================================================================================
 398          // DAC_0_enter_DefaultMode_from_RESET
 399          //================================================================================
 400          extern void DAC_0_enter_DefaultMode_from_RESET(void) {
 401   1              // $[DAC0CF0 - DAC0 Configuration 0]
 402   1              /***********************************************************************
 403   1               - DAC0 is enabled and will drive the output pin
 404   1               - DAC0 output updates occur on Timer 4 high byte overflow
 405   1               - DAC0 input is treated as right-justified
 406   1               - All resets will reset DAC0 and its associated registers
 407   1               ***********************************************************************/
 408   1              SFRPAGE = 0x30;
 409   1              DAC0CF0 = DAC0CF0_EN__ENABLE | DAC0CF0_UPDATE__TIMER4
 410   1                              | DAC0CF0_LJST__RIGHT_JUSTIFY | DAC0CF0_RSTMD__NORMAL;
 411   1              // [DAC0CF0 - DAC0 Configuration 0]$
 412   1      
 413   1              // $[DAC0CF1 - DAC0 Configuration 1]
 414   1              // [DAC0CF1 - DAC0 Configuration 1]$
 415   1      
 416   1      }
 417          
 418          //================================================================================
 419          // DAC_1_enter_DefaultMode_from_RESET
 420          //================================================================================
 421          extern void DAC_1_enter_DefaultMode_from_RESET(void) {
 422   1              // $[DAC1CF0 - DAC1 Configuration 0]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 8   

 423   1              /***********************************************************************
 424   1               - DAC1 is enabled and will drive the output pin
 425   1               - DAC1 output updates occur on Timer 4 high byte overflow
 426   1               - DAC1 input is treated as right-justified
 427   1               - All resets will reset DAC1 and its associated registers
 428   1               ***********************************************************************/
 429   1              DAC1CF0 = DAC1CF0_EN__ENABLE | DAC1CF0_UPDATE__TIMER4
 430   1                              | DAC1CF0_LJST__RIGHT_JUSTIFY | DAC1CF0_RSTMD__NORMAL;
 431   1              // [DAC1CF0 - DAC1 Configuration 0]$
 432   1      
 433   1              // $[DAC1CF1 - DAC1 Configuration 1]
 434   1              // [DAC1CF1 - DAC1 Configuration 1]$
 435   1      
 436   1      }
 437          
 438          //================================================================================
 439          // DACGCF_0_enter_DefaultMode_from_RESET
 440          //================================================================================
 441          extern void DACGCF_0_enter_DefaultMode_from_RESET(void) {
 442   1              // $[DACGCF0 - DAC Global Configuration 0]
 443   1              /***********************************************************************
 444   1               - Select the VREF pin
 445   1               - Select the VDD supply
 446   1               - Input = DAC1H:DAC1L
 447   1               - Input = DAC3H:DAC3L
 448   1               - DAC1 always updates from the data source selected in D1SRC
 449   1               - DAC3 always updates from the data source selected in D3SRC
 450   1               ***********************************************************************/
 451   1              DACGCF0 = DACGCF0_D01REFSL__VREF | DACGCF0_D23REFSL__VDD
 452   1                              | DACGCF0_D1SRC__DAC1 | DACGCF0_D3SRC__DAC3 | DACGCF0_D1AMEN__NORMAL
 453   1                              | DACGCF0_D3AMEN__NORMAL;
 454   1              // [DACGCF0 - DAC Global Configuration 0]$
 455   1      
 456   1              // $[DACGCF2 - DAC Global Configuration 2]
 457   1              // [DACGCF2 - DAC Global Configuration 2]$
 458   1      
 459   1      }
 460          
 461          //================================================================================
 462          // VREF_0_enter_DefaultMode_from_RESET
 463          //================================================================================
 464          extern void VREF_0_enter_DefaultMode_from_RESET(void) {
 465   1              // $[REF0CN - Voltage Reference Control]
 466   1              /***********************************************************************
 467   1               - 2.4 V reference output to VREF pin
 468   1               ***********************************************************************/
 469   1              SFRPAGE = 0x00;
 470   1              REF0CN = REF0CN_VREFSL__VREF_2P4;
 471   1              // [REF0CN - Voltage Reference Control]$
 472   1      
 473   1      }
 474          
 475          //================================================================================
 476          // CLOCK_0_enter_DefaultMode_from_RESET
 477          //================================================================================
 478          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 479   1              // $[HFOSC1 Setup]
 480   1              // [HFOSC1 Setup]$
 481   1      
 482   1              // $[CLKSEL - Clock Select]
 483   1              /***********************************************************************
 484   1               - Clock derived from the Internal High Frequency Oscillator 0
 485   1               - SYSCLK is equal to selected clock source divided by 1
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 9   

 486   1               ***********************************************************************/
 487   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 488   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 489   1                      ;
 490   1              // [CLKSEL - Clock Select]$
 491   1      
 492   1      }
 493          
 494          //================================================================================
 495          // TIMER01_0_enter_DefaultMode_from_RESET
 496          //================================================================================
 497          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 498   1              // $[Timer Initialization]
 499   1              //Save Timer Configuration
 500   1              uint8_t TCON_save;
 501   1              TCON_save = TCON;
 502   1              //Stop Timers
 503   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 504   1      
 505   1              // [Timer Initialization]$
 506   1      
 507   1              // $[TH0 - Timer 0 High Byte]
 508   1              // [TH0 - Timer 0 High Byte]$
 509   1      
 510   1              // $[TL0 - Timer 0 Low Byte]
 511   1              // [TL0 - Timer 0 Low Byte]$
 512   1      
 513   1              // $[TH1 - Timer 1 High Byte]
 514   1              // [TH1 - Timer 1 High Byte]$
 515   1      
 516   1              // $[TL1 - Timer 1 Low Byte]
 517   1              // [TL1 - Timer 1 Low Byte]$
 518   1      
 519   1              // $[Timer Restoration]
 520   1              //Restore Timer Configuration
 521   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 522   1      
 523   1              // [Timer Restoration]$
 524   1      
 525   1      }
 526          
 527          //================================================================================
 528          // TIMER16_3_enter_DefaultMode_from_RESET
 529          //================================================================================
 530          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 531   1              // $[Timer Initialization]
 532   1              // Save Timer Configuration
 533   1              uint8_t TMR3CN0_TR3_save;
 534   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 535   1              // Stop Timer
 536   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 537   1              // [Timer Initialization]$
 538   1      
 539   1              // $[TMR3CN1 - Timer 3 Control 1]
 540   1              // [TMR3CN1 - Timer 3 Control 1]$
 541   1      
 542   1              // $[TMR3CN0 - Timer 3 Control]
 543   1              // [TMR3CN0 - Timer 3 Control]$
 544   1      
 545   1              // $[TMR3H - Timer 3 High Byte]
 546   1              /***********************************************************************
 547   1               - Timer 3 High Byte = 0xF8
 548   1               ***********************************************************************/
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 10  

 549   1              TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 550   1              // [TMR3H - Timer 3 High Byte]$
 551   1      
 552   1              // $[TMR3L - Timer 3 Low Byte]
 553   1              /***********************************************************************
 554   1               - Timer 3 Low Byte = 0x06
 555   1               ***********************************************************************/
 556   1              TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 557   1              // [TMR3L - Timer 3 Low Byte]$
 558   1      
 559   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 560   1              /***********************************************************************
 561   1               - Timer 3 Reload High Byte = 0xF8
 562   1               ***********************************************************************/
 563   1              TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 564   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 565   1      
 566   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 567   1              /***********************************************************************
 568   1               - Timer 3 Reload Low Byte = 0x06
 569   1               ***********************************************************************/
 570   1              TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 571   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 572   1      
 573   1              // $[TMR3CN0]
 574   1              /***********************************************************************
 575   1               - Start Timer 3 running
 576   1               ***********************************************************************/
 577   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 578   1              // [TMR3CN0]$
 579   1      
 580   1              // $[Timer Restoration]
 581   1              // Restore Timer Configuration
 582   1              TMR3CN0 |= TMR3CN0_TR3_save;
 583   1              // [Timer Restoration]$
 584   1      
 585   1      }
 586          
 587          //================================================================================
 588          // TIMER16_4_enter_DefaultMode_from_RESET
 589          //================================================================================
 590          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 591   1              // $[Timer Initialization]
 592   1              // Save Timer Configuration
 593   1              uint8_t TMR4CN0_TR4_save;
 594   1              SFRPAGE = 0x10;
 595   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 596   1              // Stop Timer
 597   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 598   1              // [Timer Initialization]$
 599   1      
 600   1              // $[TMR4CN1 - Timer 4 Control 1]
 601   1              /***********************************************************************
 602   1               - Capture high-to-low transitions on the T2 input pin
 603   1               - Timer will only reload on overflow events
 604   1               - Suspend Timer Synchronization Status = 0x00
 605   1               ***********************************************************************/
 606   1              TMR4CN1 = TMR4CN1_T4CSEL__PIN | TMR4CN1_RLFSEL__NONE
 607   1                              | (0x00 << TMR4CN1_STSYNC__SHIFT);
 608   1              // [TMR4CN1 - Timer 4 Control 1]$
 609   1      
 610   1              // $[TMR4CN0 - Timer 4 Control]
 611   1              // [TMR4CN0 - Timer 4 Control]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 11  

 612   1      
 613   1              // $[TMR4H - Timer 4 High Byte]
 614   1              /***********************************************************************
 615   1               - Timer 4 High Byte = 0xFE
 616   1               ***********************************************************************/
 617   1              TMR4H = (0xFE << TMR4H_TMR4H__SHIFT);
 618   1              // [TMR4H - Timer 4 High Byte]$
 619   1      
 620   1              // $[TMR4L - Timer 4 Low Byte]
 621   1              /***********************************************************************
 622   1               - Timer 4 Low Byte = 0x68
 623   1               ***********************************************************************/
 624   1              TMR4L = (0x68 << TMR4L_TMR4L__SHIFT);
 625   1              // [TMR4L - Timer 4 Low Byte]$
 626   1      
 627   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 628   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 629   1      
 630   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 631   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 632   1      
 633   1              TMR4RL = (uint16_t)(-SYSCLK / SAMPLE_RATE_DAC);
 634   1              // $[TMR4CN0]
 635   1              /***********************************************************************
 636   1               - Start Timer 4 running
 637   1               ***********************************************************************/
 638   1              TMR4CN0 |= TMR4CN0_TR4__RUN;
 639   1              // [TMR4CN0]$
 640   1      
 641   1              // $[Timer Restoration]
 642   1              // Restore Timer Configuration
 643   1              TMR4CN0 |= TMR4CN0_TR4_save;
 644   1              // [Timer Restoration]$
 645   1      
 646   1      }
 647          
 648          //================================================================================
 649          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 650          //================================================================================
 651          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 652   1              // $[CKCON0 - Clock Control 0]
 653   1              /***********************************************************************
 654   1               - External oscillator divided by 8 
 655   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 656   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 657   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 658   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 659   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 660   1               - Timer 1 uses the clock defined by the prescale field, SCA
 661   1               ***********************************************************************/
 662   1              SFRPAGE = 0x00;
 663   1              CKCON0 = CKCON0_SCA__EXTOSC_DIV_8 | CKCON0_T0M__PRESCALE
 664   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 665   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 666   1                              | CKCON0_T1M__PRESCALE;
 667   1              // [CKCON0 - Clock Control 0]$
 668   1      
 669   1              // $[CKCON1 - Clock Control 1]
 670   1              // [CKCON1 - Clock Control 1]$
 671   1      
 672   1              // $[TMOD - Timer 0/1 Mode]
 673   1              /***********************************************************************
 674   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 12  

 675   1               - Mode 0, 13-bit Counter/Timer
 676   1               - Timer Mode
 677   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 678   1               - Timer Mode
 679   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 680   1               ***********************************************************************/
 681   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 682   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 683   1              // [TMOD - Timer 0/1 Mode]$
 684   1      
 685   1              // $[TCON - Timer 0/1 Control]
 686   1              /***********************************************************************
 687   1               - Start Timer 0 running
 688   1               ***********************************************************************/
 689   1              TCON |= TCON_TR0__RUN;
 690   1              // [TCON - Timer 0/1 Control]$
 691   1      
 692   1      }
 693          
 694          //================================================================================
 695          // SPI_0_enter_DefaultMode_from_RESET
 696          //================================================================================
 697          extern void SPI_0_enter_DefaultMode_from_RESET(void) {
 698   1              // $[SPI0CKR - SPI0 Clock Rate]
 699   1              /***********************************************************************
 700   1               - SPI0 Clock Rate = 0x0B
 701   1               ***********************************************************************/
 702   1              SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
 703   1              // [SPI0CKR - SPI0 Clock Rate]$
 704   1      
 705   1              // $[SPI0CFG - SPI0 Configuration]
 706   1              /***********************************************************************
 707   1               - Enable master mode. Operate as a master
 708   1               ***********************************************************************/
 709   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 710   1              // [SPI0CFG - SPI0 Configuration]$
 711   1      
 712   1              // $[SPI0PCF - SPI0 Pin Configuration]
 713   1              // [SPI0PCF - SPI0 Pin Configuration]$
 714   1      
 715   1              // $[SPI0CN0 - SPI0 Control]
 716   1              /***********************************************************************
 717   1               - Enable the SPI module
 718   1               - 3-Wire Slave or 3-Wire Master Mode
 719   1               ***********************************************************************/
 720   1              SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
 721   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
 722   1              // [SPI0CN0 - SPI0 Control]$
 723   1      
 724   1              // $[SPI0FCN0 - SPI0 FIFO Control 0]
 725   1              // [SPI0FCN0 - SPI0 FIFO Control 0]$
 726   1      
 727   1              // $[SPI0FCN1 - SPI0 FIFO Control 1]
 728   1              // [SPI0FCN1 - SPI0 FIFO Control 1]$
 729   1      
 730   1      }
 731          
 732          //================================================================================
 733          // INTERRUPT_0_enter_DefaultMode_from_RESET
 734          //================================================================================
 735          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 736   1              // $[EIE1 - Extended Interrupt Enable 1]
 737   1              /***********************************************************************
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 13  

 738   1               - Disable ADC0 Conversion Complete interrupt
 739   1               - Disable ADC0 Window Comparison interrupt
 740   1               - Disable CP0 interrupts
 741   1               - Disable CP1 interrupts
 742   1               - Enable interrupt requests generated by a Port Match
 743   1               - Disable all PCA0 interrupts
 744   1               - Disable all SMB0 interrupts
 745   1               - Enable interrupt requests generated by the TF3L or TF3H flags
 746   1               ***********************************************************************/
 747   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 748   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__ENABLED | EIE1_EPCA0__DISABLED
 749   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 750   1              // [EIE1 - Extended Interrupt Enable 1]$
 751   1      
 752   1              // $[EIE2 - Extended Interrupt Enable 2]
 753   1              /***********************************************************************
 754   1               - Disable CL0 interrupts
 755   1               - Disable all I2C0 slave interrupts
 756   1               - Enable interrupt requests generated by the TF4L or TF4H flags
 757   1               - Disable Timer 5 interrupts
 758   1               - Disable UART1 interrupts
 759   1               ***********************************************************************/
 760   1              EIE2 = EIE2_CL0__DISABLED | EIE2_EI2C0__DISABLED | EIE2_ET4__ENABLED
 761   1                              | EIE2_ET5__DISABLED | EIE2_ES1__DISABLED;
 762   1              // [EIE2 - Extended Interrupt Enable 2]$
 763   1      
 764   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 765   1              /***********************************************************************
 766   1               - ADC0 Conversion Complete interrupt priority MSB set to low
 767   1               - ADC0 Window interrupt priority MSB set to low
 768   1               - CP0 interrupt priority MSB set to low
 769   1               - CP1 interrupt priority MSB set to low
 770   1               - Port Match interrupt priority MSB set to high
 771   1               - PCA0 interrupt priority MSB set to low
 772   1               - SMB0 interrupt priority MSB set to low
 773   1               - Timer 3 interrupt priority MSB set to high
 774   1               ***********************************************************************/
 775   1              SFRPAGE = 0x10;
 776   1              EIP1H = EIP1H_PHADC0__LOW | EIP1H_PHWADC0__LOW | EIP1H_PHCP0__LOW
 777   1                              | EIP1H_PHCP1__LOW | EIP1H_PHMAT__HIGH | EIP1H_PHPCA0__LOW
 778   1                              | EIP1H_PHSMB0__LOW | EIP1H_PHT3__HIGH;
 779   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 780   1      
 781   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 782   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 783   1      
 784   1              // $[EIP2 - Extended Interrupt Priority 2]
 785   1              // [EIP2 - Extended Interrupt Priority 2]$
 786   1      
 787   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 788   1              /***********************************************************************
 789   1               - CL0 interrupt priority MSB set to low
 790   1               - I2C0 Slave interrupt priority MSB set to low
 791   1               - Timer 4 interrupt priority MSB set to high
 792   1               - Timer 5 interrupt priority MSB set to low
 793   1               - UART1 interrupt priority MSB set to low
 794   1               ***********************************************************************/
 795   1              EIP2H = EIP2H_PHCL0__LOW | EIP2H_PHI2C0__LOW | EIP2H_PHT4__HIGH
 796   1                              | EIP2H_PHT5__LOW | EIP2H_PHS1__LOW;
 797   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 798   1      
 799   1              // $[IE - Interrupt Enable]
 800   1              /***********************************************************************
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/10/2017 20:38:50 PAGE 14  

 801   1               - Enable each interrupt according to its individual mask setting
 802   1               - Disable external interrupt 0
 803   1               - Disable external interrupt 1
 804   1               - Enable interrupt requests generated by SPI0
 805   1               - Disable all Timer 0 interrupt
 806   1               - Disable all Timer 1 interrupt
 807   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 808   1               - Disable UART0 interrupt
 809   1               ***********************************************************************/
 810   1              SFRPAGE = 0x00;
 811   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 812   1                              | IE_ESPI0__ENABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 813   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 814   1              // [IE - Interrupt Enable]$
 815   1      
 816   1              // $[IP - Interrupt Priority]
 817   1              // [IP - Interrupt Priority]$
 818   1      
 819   1              // $[IPH - Interrupt Priority High]
 820   1              // [IPH - Interrupt Priority High]$
 821   1      
 822   1      }
 823          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    270    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
